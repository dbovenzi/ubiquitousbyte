@{
    ViewData["Title"] = "Ubiquitous Byte";
}

<div >
    <h3>Welcome to the Ubiquitous Byte on <span style="color: red;">@ViewData["MachineName"]</span></h3>
    <p class="Lead">
        A dotnet core 3.x website running in a container, hosted on Kubernates running on 4 Raspberry Pis, and deployed via 
        GitHib Actions CI/CD.
    </p>
    <hr>
    <ul class="list-group">
        <li class="list-group-item list-group-item-success">1. Build Rasberry Pi cluster case.</li>
        <li class="list-group-item list-group-item-success">2. Flash SD cards with Ubuntu for Pi.</li>
        <li class="list-group-item list-group-item-success">3. Connect up Pis to network hub and power, and plug into network socket.</li>
        <li class="list-group-item list-group-item-success">4. Attach to Pis via SSH (using Terminus).</li>
        <li class="list-group-item list-group-item-success">5. Set Pi's hostnames to Master, and Node01, 02 and 03.</li>
        <li class="list-group-item list-group-item-success">6. Install microK8s via snap on all Pis.</li>
        <li class="list-group-item list-group-item-success">7. Join node Pi's to the master.  We now have a K8s Cluster!</li>
        <li class="list-group-item list-group-item-success">8. Write a basic dotnet MVC website (this one).</li>
        <li class="list-group-item list-group-item-success">9. Define Dockerfile to build a Linux arm64 image that will run on a Pi.</li>
        <li class="list-group-item list-group-item-success">9. Check code into GitHib repo.</li>
        <li class="list-group-item list-group-item-success">10.Build GitHib Actions workflow to build and push image to Docker hub 
            private respository.</li>
        <li class="list-group-item list-group-item-success">11.Test image by <code>docker pull dbovenzi/ubiquitousbyte:pi-latest</code> 
        and then <code>docker run -p 8080:80 {container id}</code>. </li>
        <li class="list-group-item list-group-item-success">12.Confirm image runs on my Mac.</li>
        <li class="list-group-item list-group-item-success">13.Build K8s Deployment and Service config files and add to Git repo.</li>
        <li class="list-group-item list-group-item-success">14.Create a kubectl secret to access the docker private reposudo microk8s.kubectl 
            create secret docker-registry 
            regcred --docker-server=https://index.docker.io/v1/  --docker-username=dbovenzi --docker-password=[secret removed] 
            --docker-email=dbovenzi@gmail.com</li>
        <li class="list-group-item list-group-item-success">15.Run the file and deploy to the cluster using kubectl 
            (update kubectl config to point to the cluster api controller) first.</li>
        <li class="list-group-item list-group-item-success">16. On each node run: <code>sudo iptables -P FORWARD ACCEPT</code> to enable K8s DNS resolution.</li>
        <li class="list-group-item list-group-item-success">17.Install GitHub self-hosted runner on the master node Pi.</li>
        <li class="list-group-item list-group-item-success">18.Create a GitHub Action that triggers of a new image update for 
            ubiquitousbyte:piu-latest in Docker Hub and runs kubectl apply using the K8s deployment config in the repo.</li>
        <li class="list-group-item list-group-item-success">19.Use the self-hossted runner to execute the Kubectl action.</li>
        
        <li class="list-group-item list-group-item-light">20.Add a 5th Pi, call it Ingress.</li>
        
        <li class="list-group-item list-group-item-light">21.Install free linux loadbalancer (HAProxy) on it and balance across the 3 nodes.</li>
        <li class="list-group-item list-group-item-success">22.Write a basic dotnet MVC Web API.</li>
        <li class="list-group-item list-group-item-light">23.Write a few dotnet MVC and console microservices.</li>
        <li class="list-group-item list-group-item-light">24.Adapt the basic frontend app to call the microservice via the api.</li>
        <li class="list-group-item list-group-item-light">25.Set up appropriate K8s services to allow cluster access between the FE, API and MSvcs</li>
        <li class="list-group-item list-group-item-light">26.Add permanent data store</li>

    </ul>
</div>
